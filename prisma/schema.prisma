// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Service {
  id               String             @id @default(cuid())
  title            String
  description      String
  price            Int
  published        Boolean            @default(false)
  author           User               @relation(fields: [authorId], references: [id])
  authorId         String
  category         Category           @relation(fields: [categoryId], references: [id])
  categoryId       String
  servicePortfolio ServicePortfolio[]
  review           Review[]
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @updatedAt @map(name: "updated_at")
}

model ServicePortfolio {
  id        String  @id @default(cuid())
  url       String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
}

model User {
  id              String           @id @default(cuid())
  name            String
  username        String           @unique
  email           String           @unique
  photo           String?
  title           String
  phoneNumber     String
  services        Service[]
  reviews         Review[]
  sellerResponses SellerResponse[]
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Category {
  id      String    @id @default(cuid())
  name    String    @unique
  logo    String
  Service Service[]
}

model Review {
  id              String           @id @default(cuid())
  rating          Float
  response        String
  price           Int
  author          User             @relation(fields: [userId], references: [id])
  userId          String
  service         Service          @relation(fields: [serviceId], references: [id])
  serviceId       String
  sellerResponses SellerResponse[]
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
}

model SellerResponse {
  id        String   @id @default(cuid())
  response  String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}
